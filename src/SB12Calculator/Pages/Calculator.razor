@page "/calculator"
@page "/"
@using SB12Calculator.Core
@inject HttpClient Http

<PageTitle>SB 12 Calculator</PageTitle>

<h1>SB 12 Calculator</h1>

@if (_districts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="@_editContext" OnValidSubmit="@HandleValidSubmit">
        <ObjectGraphDataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-floating mb-4">
            <InputSelect id="DistrictId" class="form-select form-control" @bind-Value="_model.DistrictId">
                @if (_model.DistrictId is null)
                {
                    <option selected value="">None</option>
                }
                @foreach (var district in _districts.OrderBy(d => d.DistrictName))
                {
                    <option value="@district.DistrictId">@district.DistrictName (@district.DistrictId)</option>
                }
                @if (_model.DistrictId is not null)
                {
                    <option value="">None</option>
                }
            </InputSelect>
            <label for="DistrictId" class="form-label">District</label>
        </div>

        <div class="form-floating mb-4">
            <InputNumber id="QualifyYear" @bind-Value="_model.ExemptionQualifyYear" class="form-control" />
            <label for="QualifyYear" class="form-label">Over 65 / Disabled qualify year</label>
        </div>

        @for (var i = 0; i < _model.Details.Count; i++)
        {
            var detail = _model.Details[i];
            <div class="row mb-2">
                <div class="col-md-4">
                    @if (i < _model.Details.Count - 1)
                    {
                        <div class="form-floating">
                            <InputNumber id="@($"TaxableValue_{detail.Year}")" @bind-Value="detail.TaxableValue" class="form-control"></InputNumber>
                            <label for="@($"TaxableValue_{detail.Year}")" class="form-label">@detail.Year Taxable Value</label>
                        </div>
                    }
                </div>
                <div class="col-md-4">
                    <div class="form-floating">
                        <InputNumber id="@($"NewImprovement_{detail.Year}")" @bind-Value="detail.CeilingAdditionalImprovement" class="form-control"></InputNumber>
                        <label for="@($"NewImprovement_{detail.Year}")" class="form-label">@(i == 0 ? $"{detail.Year} taxes imposed" : $"{detail.Year} New Improvement taxes")</label>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-floating">
                        <InputNumber id="@($"MCR_{detail.Year}")" @bind-Value="detail.MCR" class="form-control" disabled="@detail.MCRPopulated"></InputNumber>
                        <label for="@($"MCR_{detail.Year}")" class="form-label">@detail.Year MCR</label>
                    </div>
                </div>
            </div>
        }

        <button type="submit">Submit</button>
    </EditForm>

    @if (_calculationResult != null)
    {
        <table class="table caption-top">
            <caption>Result</caption>
            <thead>
                <tr>
                    <th scope="col">Year</th>
                    <th scope="col">Starting</th>
                    <th scope="col">New Improvement</th>
                    <th scope="col">Taxable Value</th>
                    <th scope="col">Reduction</th>
                    <th scope="col">Running Total</th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < _calculationResult.Details.Count; i++)
                {
                    var detail = _calculationResult.Details[i];
                    if (i < _calculationResult.Details.Count - 1)
                    {
                        <tr>
                            <th scope="row">@detail.Year</th>
                            <td>@detail.StartingAmount.ToString("C2")</td>
                            <td>@(i == 0 ? "N/A" : detail.AdditionalImprovement.ToString("C2"))</td>
                            <td>@(detail.TaxableValue.ToString("N0"))</td>
                            <td><Tooltip Text="@detail.CalculationText">@detail.Reduction.ToString("C2")</Tooltip></td>
                            <td>@detail.RunningTotal.ToString("C2")</td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <th scope="row">@detail.Year</th>
                            <td>@detail.StartingAmount.ToString("C2")</td>
                            <td>@detail.AdditionalImprovement.ToString("C2")</td>
                            <td>N/A</td>
                            <td>N/A</td>
                            <td><b>@detail.RunningTotal.ToString("C2")</b></td>
                        </tr> 
                    }
                }
            </tbody>
        </table>
    }
}

@code {
    private DistrictDetail[]? _districts;
    private EditContext? _editContext;
    private readonly CalculatorModel _model = new();
    private CalculationResult _calculationResult;
    private const int CalculationYear = 2023;

    protected override async Task OnInitializedAsync()
    {
        _districts = await Http.GetFromJsonAsync<DistrictDetail[]>("data/rates.json");
        _editContext = new(_model);
        _editContext.OnFieldChanged += EditFieldChanged;
        _model.ExemptionQualifyYear = 2018;
        UpdateModelYears();
    }

    private void EditFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        if (e.FieldIdentifier.FieldName is nameof(CalculatorModel.ExemptionQualifyYear) or nameof(CalculatorModel.DistrictId))
        {
            UpdateModelYears();
        }
    }

    private void UpdateModelYears()
    {
        if (string.IsNullOrEmpty(_model.DistrictId))
            return;

        var dist = _districts.FirstOrDefault(d => d.DistrictId == _model.DistrictId);

        if (dist == null)
            return;

        var startYear = Math.Max(_model.ExemptionQualifyYear, 2018);

        if (_model.Details.Count > 0)
        {
            for (var x = _model.Details.Count - 1; x >= 0; x--)
            {
                var detail = _model.Details[x];

                if (detail.Year < startYear)
                    _model.Details.RemoveAt(x);
            }
        }

        for (var i = startYear; i <= CalculationYear; i++)
        {
            var rate = dist.Rates.FirstOrDefault(r => r.Year == i);
            var detail = _model.Details.FirstOrDefault(d => d.Year == i);

            if (detail == null)
            {
                detail = new CalculatorYearDetailModel
                    {
                        Year = i,
                        TaxableValue = 100000
                    };
                _model.Details.Insert(i - startYear, detail);
            }

            if (rate != null)
            {
                detail.MCRPopulated = true;
                detail.MCR = rate.MaximumCompressedRate;
            }
            else
            {
                detail.MCRPopulated = false;
                detail.MCR = null;
            }
        }
    }

    private void HandleValidSubmit()
    {
        var calculationParameters = new CalculationParameters
            {
                ExemptionQualifyYear = _model.ExemptionQualifyYear,
                CalculationYear = CalculationYear
            };

        foreach (var detail in _model.Details)
        {
            calculationParameters.YearDetails.Add(detail.Year, new CalculationParameterYearDetail
                {
                    MCR = detail.MCR ?? 0,
                    TaxableValue = detail.TaxableValue,
                    CeilingOrAdditionalImprovement = detail.CeilingAdditionalImprovement
                });
        }
        _calculationResult = Core.Calculator.Calculate(calculationParameters);
    }
}
